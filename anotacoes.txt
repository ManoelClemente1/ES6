/*const arr = [1, 3, 4, 5, 8, 9];

const newArray = arr.map(function(item, index) {
    return item + index;
});

console.log(newArray);


const sum = arr.reduce(function(total, next) {
    return total + next;
});

console.log(sum);

const filter = arr.filter(function(item) {
    return item % 2 === 0;
});

console.log(filter);

const find = arr.find(function(item) {
    return item === 4;
}); */
/*const arr = [1, 3, 4, 5, 6];

const newArr = arr.map((item) => item * 2);

console.log(newArr);


const teste = () => {
    return 'teste';
}

console.log(teste());


const teste1 = () => 'teste1'

console.log(teste1());

const teste2 = () => ({
    nome: 'Manoel'
});

console.log(teste2()); */

/*function soma(a = 0, b = 0) {
    return a + b;
}

console.log(soma(1));

const soma1 = (a = 0, b = 0) => a + b;

console.log(soma(2));*/

/*
//--desestruturador 
const usuario = {
    nome: 'Manoel',
    idade: '21',
    endereco: {
        cidade: 'São Paulo',
        estado: 'SP',
    },
};



const { nome, idade, endereco: { cidade, estado } } = usuario;

console.log(nome, idade, cidade, estado);

function mostraNome({ nome, idade }) {
    console.log(nome, idade);
}

mostraNome(usuario); */

/*
//--rest e spread

//REST - serve para pegar o resto das propiedades

const usuario = {
    nome: 'Manoel',
    idade: 23,
    empresa: 'SPC'
};

const { nome, ...resto } = usuario;

console.log(nome);
console.log(resto);

const arr = [1, 2, 3, 4];

const [a, b, ...c] = arr;

console.log(a);
console.log(b);
console.log(c);

function soma(...params) {
    return params.reduce((total, next) => total + next);
}

console.log(soma(1, 3));

//--SPREAD

const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

const arr3 = [...arr1, ...arr2];

console.log(arr3);

const usuario1 = {
    nome: 'Manoel',
    idade: 21,
    empresa: 'SPC',
};

const usuario2 = {...usuario1, nome: 'teste' };

console.log(usuario2);

*/
/*
//-- template literals

const nome = "Manoel";
const idade = 21;

//console.log('Meu nome é ' + nome + ' e tenho ' + idade + ' anos');

console.log(`Meu nome é ${nome} e tenho ${idade} anos`);
*/

//-- Object Short Syntax

/*
const nome = "Manoel";
const idade = 21;

const usuario = {
    nome,
    idade,
    empresa: 'SPC',
};

console.log(usuario);

*/

programação assincrona - promisses são formas de realizarmos ações de forma assincrona, muito utilizadas para realizar solicitações a api.

pesquisar async/ await
    async function x promise
    babel polyfill

    const minhaPromise = () => new Promise((resolve, reject) => {
    setTimeout(() => { resolve('OK') }, 2000);
});

async function executaPromise() {
    const response = await minhaPromise();
    console.log(response);
}

executaPromise();

--- chamando api github
import axios from 'axios';

class Api {
    static async getUserInfo(username) {

        try {
            const response = await axios.get(`https://api.github.com/users/${username}`);
            console.log(response);
        } catch (err) {

            console.warn('Erro na api');
        }



    }
}

Api.getUserInfo('ManoelClemente1');